package l2open.gameserver.clientpackets;

import l2open.config.ConfigValue;
import l2open.gameserver.geodata.GeoEngine;
import l2open.gameserver.model.L2Player;
import l2open.gameserver.model.L2Skill;
import l2open.gameserver.model.entity.siege.territory.TerritorySiege;
import l2open.gameserver.serverpackets.FlyToLocation.FlyType;
import l2open.util.Location;

public class ValidatePosition extends L2GameClientPacket
{
	private final Location _loc = new Location();
	@SuppressWarnings("unused")
	private int _data;
	private double _diff;
	private int _dz;
	private int _h;
	private int _hz;
	private Location _lastClientPosition;
	private Location _lastServerPosition;

	/**
	 * packet type id 0x48
	 * format:		cddddd
	 */
	@Override
	public void readImpl()
	{
		_loc.x = readD();
		_loc.y = readD();
		_loc.z = readD();
		_loc.h = readD();
		_data = readD();
	}

	@Override
	public void runImpl()
	{
		L2Player activeChar = getClient().getActiveChar();
		if(activeChar == null)
			return;

		if(activeChar.isTeleporting() || activeChar.inObserverMode())
			return;

		if(ConfigValue.DebugValidatePosition)
		{
			_log.info("DebugValidatePosition: ["+_loc.x+", "+_loc.y+", "+_loc.z+", "+_loc.h+"]["+_data+"]["+activeChar.getLoc().x+", "+activeChar.getLoc().y+", "+activeChar.getLoc().z+", "+activeChar.getLoc().h+"]");
		}
		
		_lastClientPosition = activeChar.getLastClientPosition();
		_lastServerPosition = activeChar.getLastServerPosition();

		if(_lastClientPosition == null)
			_lastClientPosition = activeChar.getLoc();
		if(_lastServerPosition == null)
			_lastServerPosition = activeChar.getLoc();

		if(activeChar.getX() == 0 && activeChar.getY() == 0 && activeChar.getZ() == 0)
		{
			correctPosition(activeChar);
			return;
		}

		if(activeChar.isInFlyingTransform())
		{
			// В летающей трансформе нельзя находиться на территории Aden
			if(_loc.x > -166168)
			{
				activeChar.setTransformation(0);
				return;
			}

			// В летающей трансформе нельзя летать ниже, чем 0, и выше, чем 6000
			if(_loc.z <= 0 || _loc.z >= 6000)
			{
				activeChar.teleToLocation(activeChar.getLoc().setZ(Math.min(5950, Math.max(50, _loc.z))));
				return;
			}
		}

		activeChar.checkTerritoryFlag();

		_diff = activeChar.getDistance(_loc.x, _loc.y);
		_dz = Math.abs(_loc.z - activeChar.getZ());
		_h = _lastServerPosition.z - activeChar.getZ();
		_hz = _lastClientPosition.z - activeChar.getZ();

		int _dz_c = Math.abs(_loc.z - _lastServerPosition.z);
		int _h_c = _lastServerPosition.z - _loc.z;
		int _hz_c = _lastClientPosition.z - _loc.z;

		if(activeChar.isInVehicle())
		{
			activeChar.setLastClientPosition(_loc.setH(activeChar.getHeading()));
			activeChar.setLastServerPosition(activeChar.getLoc());
			return;
		}

		// Если мы уже падаем, то отключаем все валидейты
		/*if(activeChar.isFalling())
		{
			_diff = 0;
			_dz = 0;
			_h = 0;
		}*/
		/**
		 * При попытке проломится через пол, при валидации координата _loc.z не меняется
		 **/
		 if(ConfigValue.DebugMovePackets)
			_log.info("Client:-> ValidatePos: _h="+_h+" _dz="+_dz+" _hz="+_hz+" _diff="+((int)_diff)+" _dz_c="+_dz_c+" _h_c="+_h_c+" _hz_c="+_hz_c+" _loc: "+_loc);
		if(_h >= 256/* || _dz >= 512*/ && !activeChar.isFalling() && _hz_c > 5) // Пока падаем, высоту не корректируем
			activeChar.falling(_h > _dz ? _h : _dz);
		else if(_h > 128 && _dz > 512)
			activeChar.broadcastMove(false, 0, 0, 0, 0);
		else if(!activeChar.isInWater() && _dz >= ConfigValue.GeoTestDeltaZ/*(activeChar.isFlying() ? 1024 : 512)*/ && _diff >= ConfigValue.GeoTestDiffZ)
		{
			int type = activeChar.getIncorrectValidateCount();
			if(ConfigValue.GeoTest != 1000)
				type = ConfigValue.GeoTest;
			switch(type)
			{
				case 0:
					if(ConfigValue.DebugMovePackets)
						_log.info("teleToLocation("+activeChar.getIncorrectValidateCount()+"): LastClientPosition");
					if(activeChar.getLastClientPosition() == null)
						activeChar.teleToLocation(_loc); // ТПшим чара, в координаты, которые нам присылает клиент.
					else
						activeChar.teleToLocation(activeChar.getLastClientPosition()); // ТПшим чара, в последние координаты, которые мы приняли от клиента.
					break;
				case 1:
					if(ConfigValue.DebugMovePackets)
						_log.info("teleToLocation("+activeChar.getIncorrectValidateCount()+"): Validation Loc");
					activeChar.teleToLocation(_loc); // ТПшим чара, в координаты, которые нам присылает клиент.
					break;
				case 2:
					if(ConfigValue.DebugMovePackets)
						_log.info("teleToLocation("+activeChar.getIncorrectValidateCount()+"): GEO: Validation Loc");
					activeChar.teleToLocation(GeoEngine.findPointToStay(_loc.x, _loc.y, _loc.z, 0, 50, activeChar.getReflection().getGeoIndex()));
					break;
				case 3:
					if(ConfigValue.DebugMovePackets)
						_log.info("teleToLocation("+activeChar.getIncorrectValidateCount()+"): GEO: LastClientPosition");
					if(activeChar.getLastClientPosition() == null)
						activeChar.teleToLocation(GeoEngine.findPointToStay(activeChar.getLoc().x, activeChar.getLoc().y, activeChar.getLoc().z, 0, 50, activeChar.getReflection().getGeoIndex()));
					else
						activeChar.teleToLocation(GeoEngine.findPointToStay(activeChar.getLastClientPosition().x, activeChar.getLastClientPosition().y, activeChar.getLastClientPosition().z, 0, 50, activeChar.getReflection().getGeoIndex()));
					break;
				case 4:
					if(ConfigValue.DebugMovePackets)
						_log.info("teleToLocation("+activeChar.getIncorrectValidateCount()+"): GEO: CharLoc");
					activeChar.teleToLocation(GeoEngine.findPointToStay(activeChar.getLoc().x, activeChar.getLoc().y, activeChar.getLoc().z, 0, 50, activeChar.getReflection().getGeoIndex()));
					break;
				default:
					if(ConfigValue.DebugMovePackets)
						_log.info("teleToLocation("+activeChar.getIncorrectValidateCount()+"): CharLoc");
					activeChar.teleToLocation(_loc);
					break;
			}
			activeChar.setIncorrectValidateCount(activeChar.getIncorrectValidateCount() + 1);
			if(ConfigValue.DebugMovePackets)
				activeChar.sendMessage("setIncorrectValidateCount1: " + activeChar.getIncorrectValidateCount());
			return;
		}
		else if(_dz >= (activeChar.isFlying() ? 512 : 256))
			activeChar.validateLocation(0);
		else if(_loc.z < -30000 || _loc.z > 30000)
		{
			if(activeChar.getIncorrectValidateCount() >= 3)
				activeChar.teleToClosestTown();
			else
			{
				if(activeChar.isGM())
				{
					activeChar.sendMessage("Client Z: " + _loc.z);
					activeChar.sendMessage("Server Z: " + activeChar.getZ());
				}
				correctPosition(activeChar);
				activeChar.setIncorrectValidateCount(activeChar.getIncorrectValidateCount() + 1);
			}
		}
		else if(_diff > 1024)
		{
			//if(activeChar.getIncorrectValidateCount() >= 3)
			//	activeChar.teleToClosestTown();
			//else
			{
				activeChar.teleToLocation(activeChar.getLoc());
				activeChar.setIncorrectValidateCount(activeChar.getIncorrectValidateCount() + 1);
				if(ConfigValue.DebugMovePackets)
					activeChar.sendMessage("setIncorrectValidateCount2: " + activeChar.getIncorrectValidateCount());
			}
		}
		else if(_diff > 256) // old: activeChar.getMoveSpeed() * 2
		{
			// Не рассылаем валидацию во время скиллов с полетом
			if (activeChar.isCastingNow())
			{
				L2Skill skill = activeChar.getCastingSkill();
				if(skill != null && skill.getFlyType() != FlyType.NONE)
					return;
			}
			//  && !activeChar.isFlying() && !activeChar.isInBoat() && !activeChar.isSwimming()
			//TODO реализовать NetPing и вычислять предельное отклонение исходя из пинга по формуле: 16 + (ping * activeChar.getMoveSpeed()) / 1000
			//_log.info("ValidatePosition: _diff="+_diff+" x="+_loc.x+", y="+_loc.y+"|x="+activeChar.getX()+", y="+activeChar.getY());
			activeChar.validateLocation(1);
			//activeChar.stopMove(false, true);
		/*if(activeChar.isMoving)
			activeChar.broadcastPacket(new CharMoveToLocation(activeChar));
		else
			activeChar.broadcastPacket(new ValidateLocation(activeChar));*/
		}
		else
			activeChar.setIncorrectValidateCount(0);

		//activeChar.setXYZ(activeChar.getLoc().x, activeChar.getLoc().y, _loc.z, false);

		activeChar.checkWaterState();

		if(activeChar.getPet() != null && !activeChar.getPet().isInRange())
			activeChar.getPet().teleportToOwner();

		activeChar.setLastClientPosition(_loc.setH(activeChar.getHeading()));
		activeChar.setLastServerPosition(activeChar.getLoc());

		if(activeChar.isTerritoryFlagEquipped() && TerritorySiege.isInProgress())
			TerritorySiege.setWardLoc(activeChar.getActiveWeaponInstance().getItemId() - 13559, activeChar.getLoc());
	}

	private void correctPosition(L2Player activeChar)
	{
		if(activeChar.isGM())
		{
			activeChar.sendMessage("Server loc: " + activeChar.getLoc());
			activeChar.sendMessage("Correcting position...");
		}
		if(_lastServerPosition.x != 0 && _lastServerPosition.y != 0 && _lastServerPosition.z != 0)
		{
			if(GeoEngine.getNSWE(_lastServerPosition.x, _lastServerPosition.y, _lastServerPosition.z, activeChar.getReflection().getGeoIndex()) == 15)
				activeChar.teleToLocation(_lastServerPosition);
			else
				activeChar.teleToClosestTown();
		}
		else if(_lastClientPosition.x != 0 && _lastClientPosition.y != 0 && _lastClientPosition.z != 0)
		{
			if(GeoEngine.getNSWE(_lastClientPosition.x, _lastClientPosition.y, _lastClientPosition.z, activeChar.getReflection().getGeoIndex()) == 15)
				activeChar.teleToLocation(_lastClientPosition);
			else
				activeChar.teleToClosestTown();
		}
		else
			activeChar.teleToClosestTown();
	}

	/*@Override
	public String getType()
	{
		return super.getType()+"["+_loc.x+", "+_loc.y+", "+_loc.z+", "+_loc.h+"]["+_data+"]";
	}*/
}