package bosses;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import java.util.concurrent.ScheduledFuture;import java.util.concurrent.locks.ReentrantLock;import javolution.util.FastMap;import l2open.common.ThreadPoolManager;import l2open.extensions.listeners.L2ZoneEnterLeaveListener;import l2open.extensions.scripts.Functions;import l2open.extensions.scripts.ScriptFile;import l2open.config.ConfigValue;import l2open.gameserver.ai.CtrlIntention;import l2open.gameserver.ai.DefaultAI;import l2open.gameserver.cache.Msg;import l2open.gameserver.instancemanager.InstancedZoneManager;import l2open.gameserver.instancemanager.InstancedZoneManager.InstancedZone;import l2open.gameserver.instancemanager.QuestManager;import l2open.gameserver.instancemanager.ZoneManager;import l2open.gameserver.model.*;import l2open.gameserver.model.L2Zone.ZoneType;import l2open.gameserver.model.instances.L2NpcInstance;import l2open.gameserver.model.quest.Quest;import l2open.gameserver.model.quest.QuestState;import l2open.gameserver.tables.NpcTable;import l2open.gameserver.tables.ReflectionTable;import l2open.gameserver.tables.SkillTable;import l2open.gameserver.tables.TerritoryTable;import l2open.gameserver.taskmanager.DecayTaskManager;import l2open.gameserver.serverpackets.ChangeZoneInfo;import l2open.gameserver.serverpackets.EventTrigger;import l2open.gameserver.serverpackets.ExSendUIEvent;import l2open.gameserver.serverpackets.ExShowScreenMessage;import l2open.gameserver.serverpackets.ExShowScreenMessage.ScreenMessageAlign;import l2open.gameserver.serverpackets.SystemMessage;import l2open.gameserver.serverpackets.PlaySound;import l2open.util.Location;import l2open.util.Log;import l2open.util.Util;import l2open.util.Rnd;/** ******************* * @author Diagod  * *   20.05.2011    * ******************* * После захода в зал, ждем 20 секунди ставим ролик, по окончании которого спауним гвардов * * 91.218.230.157 * 15470 юзает скилл s_item_black_freezing_core * 15469 юзает скилл s_item_freezing_core 274506830 **/public class FreyaManager extends Quest implements ScriptFile{	private L2Zone _zone;	private ZoneListener _zoneListener = new ZoneListener();	private final ReentrantLock lock = new ReentrantLock();	private static final int Glacier = 18853;	private static final int ArchersBreath = 18854;	private int instId = -1;	private static final int Sirra = 32762; // Может и не нужна она здесь...18852	private static final int KegorTalk = 18846;	private static final int Kegor = 18851;	private static final int Jinia = 18850;	private static final int JiniaStart = 32781;	private static final int Controler = 18932;		private static final int[][] KnightSpawns = 												{							/*0*/					{113845, -116091, -11168, 8264},							/*1*/					{113381, -115622, -11168, 8264},							/*2*/					{113380, -113978, -11168, -8224},							/*3*/					{113845, -113518, -11168, -8224},							/*4*/					{115591, -113516, -11168, -24504},							/*5*/					{116053, -113981, -11168, -24504},							/*6*/					{116061, -115611, -11168, 24804},							/*7*/					{115597, -116080, -11168, 24804},							/*8*/					{112942, -115480, -10960, 52}, // [PosX]=113078, [PosY]=-115480, [PosZ]=-10984}							/*9*/					{112940, -115146, -10960, 52}, // [PosX]=113079, [PosY]=-115154, [PosZ]=-10984}							/*10*/					{112945, -114453, -10960, 52}, // [PosX]=113081, [PosY]=-114459, [PosZ]=-10984}							/*11*/					{112945, -114123, -10960, 52}, // [PosX]=113077, [PosY]=-114129, [PosZ]=-10984}								/*12*/					{116497, -114117, -10960, 32724}, // [PosX]=116360, [PosY]=-114125, [PosZ]=-10984}							/*13*/					{116499, -114454, -10960, 32724}, // [PosX]=116359, [PosY]=-114455, [PosZ]=-10984}							/*14*/					{116501, -115145, -10960, 32724}, // [PosX]=116367, [PosY]=-115141, [PosZ]=-10984}							/*15*/					{116502, -115473, -10960, 32724} // [PosX]=116351, [PosY]=-115457, [PosZ]=-10984}												};	public static FastMap<Integer, World> worlds = new FastMap<Integer, World>();	public static FastMap<L2Player, Reflection> players = new FastMap<L2Player, Reflection>();	private static final int[] _eventTriggers = {23140202, 23140204, 23140206, 23140208, 23140212, 23140214, 23140216};	private static final int[] EMITTERS2 = {		23140102,		23140104,		23140106,		23140108,		23140110,		23140112,		23140114,		23140116,		23140118,		23140120,		23140122,		23140124,		23140126,		23140128,		23140130,		23140132,		23140134,		23140136,		23140138,		23140140,		23140142 };	public FreyaManager()	{		super("FreyaManager", 0, 99915);		addKillId(29178);		addKillId(29177);		addKillId(29180);		addKillId(29179);		addKillId(25700);		addKillId(25699);		addKillId(18856);		addKillId(18855);		addKillId(Glacier);		addAttackId(29180);		addAttackId(18856);		addAttackId(29179);		addAttackId(18855);		addTalkId(18852);		addTalkId(Sirra);		addTalkId(KegorTalk);		addTalkId(JiniaStart);	}	public class World extends Reflection	{		public L2NpcInstance Npc_Freya;		public L2NpcInstance Npc_Kegor;		public L2NpcInstance Npc_Jinia;		public L2NpcInstance controler;		public ArrayList<L2NpcInstance> ArcheryKnights = new ArrayList<>();		public ScheduledFuture<?> GlacierTimer = null;		public ScheduledFuture<?> _batleFailTask = null;		public ScheduledFuture<?> _atackKnights = null;		public boolean _setStop = false;		public boolean _ishardMode = false; // Усиленая Фрея.		public boolean _isBatle = false;		public boolean finish = true;		public int FreyaOnThrone;		public int FreyaStand;		public int Glakias;		public int ArcheryKnight;		public int archery = 0;		public int Glaciers = 0;		public int status = 0;		public int stages = 0;		public int tick = 0;		public int _Force = 0;		public World(String name)		{			super(name);		}		@Override		public void removeObject(L2Object o)		{			if(o.isPlayer())			{				for(int _eventTrigger : _eventTriggers)					o.getPlayer().sendPacket(new EventTrigger(_eventTrigger, false));				for(int _eventTrigger : EMITTERS2)					o.getPlayer().sendPacket(new EventTrigger(_eventTrigger, false));				o.getPlayer().sendPacket(new ChangeZoneInfo(0));			}			super.removeObject(o);		}	}	public static void addWorld(int id, World world)	{		worlds.put(id, world);	}	public static void delWorld(int id)	{		World world = worlds.get(id);		if(world != null)		{			if(world.GlacierTimer != null)				world.GlacierTimer.cancel(false);			if(world._atackKnights != null)				world._atackKnights.cancel(false);			if(world._batleFailTask != null)				world._batleFailTask.cancel(false);		}		worlds.remove(id);		for(L2Player player : players.keySet())		{			if(players.get(player) == null)				continue;			if(players.get(player).getId() != id)				continue;			players.remove(player);		}	}	public static World getWorld(int id)	{		World world = worlds.get(id);		if(world != null && world.getId() != 0)			return world;		return null;	}	private void enterInstance(L2NpcInstance npc, L2Player player, boolean hardMode, boolean reenter)	{		instId = hardMode ? 144 : 139;		if(ConfigValue.FreyaOneEnter && !reenter && worlds.size() > 1)		{			player.sendMessage("Рейд Босс Фрея уже занят.");			return;		}		FastMap<Integer, InstancedZone> izs = InstancedZoneManager.getInstance().getById(instId);		InstancedZoneManager izm = InstancedZoneManager.getInstance();		if(izs == null)		{			player.sendPacket(Msg.SYSTEM_ERROR);			return;		}		InstancedZone iz = izs.get(0);		if(iz == null)		{			player.sendPacket(Msg.SYSTEM_ERROR);			return;		}		String name = iz.getName();		int time = iz.getTimelimit();		int min_level = iz.getMinLevel();		int max_level = iz.getMaxLevel();			int minMembers = iz.getMinParty();		int maxMembers = iz.getMaxParty();		if(reenter)		{			// Если игрок тпанулся из инста(смерть, сое), возвращаем его в инстанс			if(player.getParty() != null && player.getParty().isInReflection())			{				Reflection old_ref = player.getParty().getReflection();				if(old_ref.getInstancedZoneId() != instId || player.getActiveReflection() != old_ref)				{					player.sendMessage("Неправильно выбран инстанс");					return;				}				else if(player.getLevel() < min_level || player.getLevel() > max_level)				{					player.sendPacket(new SystemMessage(SystemMessage.C1S_LEVEL_REQUIREMENT_IS_NOT_SUFFICIENT_AND_CANNOT_BE_ENTERED).addName(player));					return;				}				else if(player.isCursedWeaponEquipped() || player.isInFlyingTransform() || player.isDead())				{					player.sendPacket(new SystemMessage(SystemMessage.C1S_QUEST_REQUIREMENT_IS_NOT_SUFFICIENT_AND_CANNOT_BE_ENTERED).addName(player));					return;				}				else if(izm.getTimeToNextEnterInstance(name, player) > 0)				{					player.sendPacket(new SystemMessage(SystemMessage.C1_MAY_NOT_RE_ENTER_YET).addName(player));					return;				}				else if(ConfigValue.FreyaHwidProtect)					for(L2Player pl : old_ref.getPlayers())						if(pl != null && pl.getHWIDs().equals(player.getHWIDs()))						{							player.sendMessage("В инстанс можно попасть только с одного ПК.");							return;						}				players.put(player, old_ref);				player.setReflection(old_ref);				player.teleToLocation(new Location(114025 + Rnd.get(50), -112300 + Rnd.get(50), -11200));				player.setVar("backCoords", old_ref.getReturnLoc().toXYZString());				/*Quest q = QuestManager.getQuest(99915);				if(q != null)					player.processQuestEvent(q.getName(), "", null);				// Если человек проходит квест то ставим ему следующий этап квеста...				QuestState hostQuest = player.getQuestState("_10286_ReunionWithSirra");				if(hostQuest != null && hostQuest.getState() != COMPLETED && hostQuest.getInt("progress") == 2 && hostQuest.getInt("cond") == 5 && hostQuest.getInt("Ex") == 2)				{					hostQuest.set("cond", "6");					hostQuest.playSound("ItemSound.quest_middle");				}     */				return;			}		}		if(!ConfigValue.DEBUG_FREYA)		{			L2Party party = player.getParty();			if(party != null)			{				L2CommandChannel channel = party.getCommandChannel();				if(channel != null)				{					if(channel.getChannelLeader().getObjectId() != player.getObjectId())					{						player.sendPacket(Msg.ONLY_A_PARTY_LEADER_CAN_TRY_TO_ENTER);						return;					}					else if(channel.getMemberCount() < minMembers)					{						player.sendPacket(new SystemMessage("The command channel must contains at least " + minMembers + " members."));						return;					}					List<String> _hwid = new ArrayList<String>(channel.getMemberCount());					int count = 0;					for(L2Player member : channel.getMembers())					{						if(member == null)							continue;						else if(member.getLevel() < min_level || member.getLevel() > max_level)						{							player.sendPacket(new SystemMessage(SystemMessage.C1S_LEVEL_REQUIREMENT_IS_NOT_SUFFICIENT_AND_CANNOT_BE_ENTERED).addName(member));							return;						}						else if(member.isCursedWeaponEquipped() || member.isInFlyingTransform() || member.isDead())						{							player.sendPacket(new SystemMessage(SystemMessage.C1S_QUEST_REQUIREMENT_IS_NOT_SUFFICIENT_AND_CANNOT_BE_ENTERED).addName(member));							return;						}						else if(!player.isInRange(member, 700))						{							member.sendPacket(Msg.ITS_TOO_FAR_FROM_THE_NPC_TO_WORK);							player.sendPacket(Msg.ITS_TOO_FAR_FROM_THE_NPC_TO_WORK);							return;						}						else if(izm.getTimeToNextEnterInstance(name, member) > 0)						{							channel.broadcastToChannelMembers(new SystemMessage(SystemMessage.C1_MAY_NOT_RE_ENTER_YET).addName(member));							return;						}						if(ConfigValue.FreyaHwidProtect)						{							if(_hwid.contains(member.getHWIDs()))							{								player.sendMessage("В инстанс можно попасть только с одного ПК. Игрок '"+member.getName()+"' пытается завести более одного окна.");								continue;							}							_hwid.add(member.getHWIDs());						}						count++;					}					if(ConfigValue.FreyaHwidProtect && count < minMembers)					{						player.sendPacket(new SystemMessage("The command channel must contains at least " + minMembers + " members."));						return;					}					else if(count > maxMembers)					{						player.sendPacket(new SystemMessage("The command channel must contains not more than " + maxMembers + " members."));						return;					}				}				else if(!ConfigValue.FreyaNeedCommandChanel && minMembers <= 9)				{					if(!party.isLeader(player))					{						player.sendPacket(Msg.ONLY_A_PARTY_LEADER_CAN_TRY_TO_ENTER);						return;					}					else if(party.getMemberCount() < minMembers)					{						player.sendPacket(new SystemMessage("The party must contains at least " + minMembers + " members."));						return;					}					List<String> _hwid = new ArrayList<String>(party.getMemberCount());					int count = 0;					for(L2Player member : party.getPartyMembers())					{						if(member == null)							continue;						else if(member.getLevel() < min_level || member.getLevel() > max_level)						{							player.sendPacket(new SystemMessage(SystemMessage.C1S_LEVEL_REQUIREMENT_IS_NOT_SUFFICIENT_AND_CANNOT_BE_ENTERED).addName(member));							return;						}						else if(member.isCursedWeaponEquipped() || member.isInFlyingTransform() || member.isDead())						{							player.sendPacket(new SystemMessage(SystemMessage.C1S_QUEST_REQUIREMENT_IS_NOT_SUFFICIENT_AND_CANNOT_BE_ENTERED).addName(member));							return;						}						else if(!player.isInRange(member, 700))						{							member.sendPacket(Msg.ITS_TOO_FAR_FROM_THE_NPC_TO_WORK);							player.sendPacket(Msg.ITS_TOO_FAR_FROM_THE_NPC_TO_WORK);							return;						}						else if(izm.getTimeToNextEnterInstance(name, member) > 0)						{							party.broadcastToPartyMembers(new SystemMessage(SystemMessage.C1_MAY_NOT_RE_ENTER_YET).addName(member));							return;						}						if(ConfigValue.FreyaHwidProtect)						{							if(_hwid.contains(member.getHWIDs()))							{								player.sendMessage("В инстанс можно попасть только с одного ПК. Игрок '"+member.getName()+"' пытается завести более одного окна.");								continue;							}							_hwid.add(member.getHWIDs());						}						count++;					}					if(ConfigValue.FreyaHwidProtect && count < minMembers)					{						player.sendPacket(new SystemMessage("The party must contains at least " + minMembers + " members."));						return;					}					else if(count > maxMembers)					{						player.sendPacket(new SystemMessage("The party must contains not more than " + maxMembers + " members."));						return;					}				}			}		}		final World world = new World(name);		world.setInstancedZoneId(instId);		for(InstancedZone i : izs.values())		{			if (world.getReturnLoc() == null)				world.setReturnLoc(i.getReturnCoords());			if (world.getTeleportLoc() == null)				world.setTeleportLoc(i.getTeleportCoords());			world.FillSpawns(i.getSpawnsInfo());			world.FillDoors(i.getDoors());		}		world._ishardMode = hardMode;		world.FreyaOnThrone = hardMode ? 29178 : 29177; // 29177 - 29180 - Зделать мобом...29178 - Экстрим фрея		world.FreyaStand = hardMode ? 29180 : 29179; // 29180 - Экстрим фрея, без кресла...		world.Glakias = hardMode ? 25700 : 25699; // 25700 - Для Экстрим Фреи  - Дать ему АИ		world.ArcheryKnight = hardMode ? 18856 : 18855; // 18856(160) - Для Экстрим Фреи - Зделать Мобом		lock.lock();		try		{			addWorld(world.getId(), world);		}		finally		{			lock.unlock();		}		if(!ConfigValue.DEBUG_FREYA)		{			L2Party party = player.getParty();			L2CommandChannel channel = party.getCommandChannel();			if(channel != null)			{				List<String> _hwid = new ArrayList<String>(channel.getMemberCount());				for(L2Player members : channel.getMembers())				{					if(ConfigValue.FreyaHwidProtect)					{						if(_hwid.contains(members.getHWIDs()))							continue;						_hwid.add(members.getHWIDs());					}					players.put(members, world);					members.setReflection(world);					members.teleToLocation(new Location(114025 + Rnd.get(50), -112300 + Rnd.get(50), -11200)); // members.teleToLocation(iz.getTeleportCoords());					members.setVar("backCoords", world.getReturnLoc().toXYZString());					Quest q = QuestManager.getQuest(99915);					if(q != null)						members.processQuestEvent(q.getName(), "", null);					// Если человек проходит квест то ставим ему следующий этап квеста...					QuestState hostQuest = members.getQuestState("_10286_ReunionWithSirra");					if(hostQuest != null && hostQuest.getState() != COMPLETED && hostQuest.getInt("progress") == 2 && hostQuest.getInt("cond") == 5 && hostQuest.getInt("Ex") == 2)					{						hostQuest.set("cond", "6");						hostQuest.playSound("ItemSound.quest_middle");					}				}				channel.setReflection(world);				world.setCommandChannel(channel);				world.startCollapseTimer(time * 60000+2000);			}			else			{				List<String> _hwid = new ArrayList<String>(party.getMemberCount());				for(L2Player members : party.getPartyMembers())				{					if(ConfigValue.FreyaHwidProtect)					{						if(_hwid.contains(members.getHWIDs()))							continue;						_hwid.add(members.getHWIDs());					}					players.put(members, world);					members.setReflection(world);					members.teleToLocation(new Location(114025 + Rnd.get(50), -112300 + Rnd.get(50), -11200)); // members.teleToLocation(iz.getTeleportCoords());					members.setVar("backCoords", world.getReturnLoc().toXYZString());					Quest q = QuestManager.getQuest(99915);					if(q != null)						members.processQuestEvent(q.getName(), "", null);					// Если человек проходит квест то ставим ему следующий этап квеста...					QuestState hostQuest = members.getQuestState("_10286_ReunionWithSirra");					if(hostQuest != null && hostQuest.getState() != COMPLETED && hostQuest.getInt("progress") == 2 && hostQuest.getInt("cond") == 5 && hostQuest.getInt("Ex") == 2)					{						hostQuest.set("cond", "6");						hostQuest.playSound("ItemSound.quest_middle");					}				}				party.setReflection(world);				world.setParty(party);				world.startCollapseTimer(time * 60000+2000);			}			ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()			{				@Override				public void runImpl()				{					delWorld(world.getId());				}			}, time * 60000);		}		else		{			if(player.getParty() != null)			{				for(L2Player member : player.getParty().getPartyMembers())				{					players.put(member, world);					member.setReflection(world);					member.teleToLocation(new Location(114025 + Rnd.get(50), -112300 + Rnd.get(50), -11200));					member.setVar("backCoords", world.getReturnLoc().toXYZString());					Quest q = QuestManager.getQuest(99915);					if(q != null)						member.processQuestEvent(q.getName(), "", null);					QuestState hostQuest = member.getQuestState("_10286_ReunionWithSirra");					if(hostQuest != null && hostQuest.getState() != COMPLETED && hostQuest.getInt("progress") == 2 && hostQuest.getInt("cond") == 5 && hostQuest.getInt("Ex") == 2)					{						hostQuest.set("cond", "6");						hostQuest.playSound("ItemSound.quest_middle");					}				}				player.getParty().setReflection(world);				world.setParty(player.getParty());			}			else			{				players.put(player, world);				player.setReflection(world);				player.teleToLocation(new Location(114025 + Rnd.get(50), -112300 + Rnd.get(50), -11200));				player.setVar("backCoords", world.getReturnLoc().toXYZString());				Quest q = QuestManager.getQuest(99915);				if(q != null)					player.processQuestEvent(q.getName(), "", null);				QuestState hostQuest = player.getQuestState("_10286_ReunionWithSirra");				if(hostQuest != null && hostQuest.getState() != COMPLETED && hostQuest.getInt("progress") == 2 && hostQuest.getInt("cond") == 5 && hostQuest.getInt("Ex") == 2)				{					hostQuest.set("cond", "6");					hostQuest.playSound("ItemSound.quest_middle");				}			}			world.startCollapseTimer(time * 60000);			final World world2 = world;			ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()			{				@Override				public void runImpl()				{					delWorld(world2.getId());				}			}, time * 60000);		}		for(L2Player pl : world.getPlayers())			if(pl != null)				pl.sendPacket(new SystemMessage(SystemMessage.THIS_INSTANCE_ZONE_WILL_BE_TERMINATED_IN_S1_MINUTES_YOU_WILL_BE_FORCED_OUT_OF_THE_DANGEON_THEN_TIME_EXPIRES).addNumber(time));		// Спауним Сирру...		L2NpcInstance sirr = spawn(Sirra, 114760, -113144, -11225, 16384, world);		sirr.setIsInvul(true);		for(L2Player players : world.getPlayers())		{			for(L2Effect e : players.getEffectList().getAllEffects())				e.exit(false, false);			players.updateEffectIcons();		}	}	private L2NpcInstance spawn(int npcId, int X, int Y, int Z, int head, World world)	{		if(world._setStop)			return null;		if(world.ArcheryKnight == npcId)		{			List<L2NpcInstance> _list = world.getNpcs();			if(_list.size() > 170)			{				int count=0;				for(L2NpcInstance npc : _list)					if(npc != null && !npc.isDead() && npc.getNpcId() == world.ArcheryKnight)						count++;				if(count >= 160)					return null;			}		}		try		{			L2NpcInstance npc = NpcTable.getTemplate(npcId).getNewInstance();			if (npc != null && world.getId() > 0)			{				npc.setReflection(world.getId());				npc.setSpawnedLoc(new Location(X, Y, Z, head));				npc.onSpawn();				npc.spawnMe(npc.getSpawnedLoc());				return npc;			}		}		catch (Exception e)		{		}		return null;	}	private void startWave(int stage, final World world)	{		if(stage == 1)		{			stopAll(world);			world.stages = 1;			world._isBatle = true;			for(L2Player player : world.getPlayers())				player.showQuestMovie(15); // Первое видео Фреи, она там обещает, что нам рогалики будут...			if(ConfigValue.FreyaCloseDoor)				ReflectionTable.getInstance().get(world.getId()).closeDoor(23140101); // Закрываем двери, что бы не заманивали в другую комнату)))			ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()			{				@Override				public void runImpl()				{					world._setStop = false;					world.finish = false;					world.Npc_Freya = spawn(world.FreyaOnThrone, 114720, -117068, -11078, 16384, world);					world.Npc_Freya.setRunning();					startAll(world);					screenMessage(world,1801086,ScreenMessageAlign.TOP_CENTER, true);					spawnKnights(world);					spawnGlaciers(world);				}			}, 53500);		}		if(stage == 2)		{			world.stages = 2;			world._setStop = true;			for(L2Player player : world.getPlayers())				player.showQuestMovie(16); // Второе видео, это после того как мы убиваем первый раз Фрею которая на диванчике...			ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()			{				@Override				public void runImpl()				{					world.finish = false;					world._setStop = false;					world.Npc_Freya = spawn(world.FreyaOnThrone, 114719, -117450, -10673, 16384, world);					world.Npc_Freya.setIsInvul(true);					world.Npc_Freya.setParalyzed(true);					world._setStop = true;					startAll(world);					for(L2Player members : world.getPlayers())						members.sendPacket(new ExSendUIEvent(members, false, false, 60, 0, "Время до следующего боя"));					//ThreadPoolManager.getInstance().schedule(new Timer(60, world), 100);					ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()					{						@Override						public void runImpl()						{							world._setStop = false;							screenMessage(world,1801087,ScreenMessageAlign.TOP_CENTER, true);							spawnKnights(world);							spawnGlaciers(world);							batleFailTask(world);							ThreadPoolManager.getInstance().schedule(new Timer(360, world), 100);						}					}, 60100);				}			}, 21800);		}		if(stage == 3)		{			stopAll(world);			world.stages = 3;			for(L2Player player : world.getPlayers())				player.showQuestMovie(17); // Четвертое видео, это когда мы убиваем Клакиеса и Фрея вылазит с кресла...			ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()			{				@Override				public void runImpl()				{					for(L2Player player : world.getPlayers())					{						player.sendPacket(new ChangeZoneInfo(2));						for(int _eventTrigger : _eventTriggers)							player.sendPacket(new EventTrigger(_eventTrigger, true));					}				}			}, 15000);			ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()			{				@Override				public void runImpl()				{					world.finish = false;					world.status = 5;					world._setStop = false;					startAll(world);					spawnKnights(world);					spawnGlaciers(world);					//batleFailTask(world);					world.Npc_Freya = spawn(world.FreyaStand, 114720, -117068, -11078, 16384, world);					screenMessage(world,1801088,ScreenMessageAlign.TOP_CENTER, true);				}			}, 21800);		}	}	private void stopAll(World world)	{		if(world._batleFailTask != null)			world._batleFailTask.cancel(false);		world._setStop = true;		for(L2Player plr : world.getPlayers())		{			plr.abortCast(true);			plr.abortAttack(true, false);			plr.getAI().setIntention(CtrlIntention.AI_INTENTION_IDLE);			plr.p_block_move(true, null);			plr.setIsInvul(true);		}		for(L2NpcInstance npc : world.getMonsters())		{			npc.setIsInvul(true);			npc.abortCast(true);			npc.abortAttack(true, false);			npc.getAI().setIntention(CtrlIntention.AI_INTENTION_IDLE);			//npc.p_block_move(true, null);		}		if(world.controler != null)			world.controler.setNpcState(8);		world.controler = null;		for(L2Player player : world.getPlayers())			for(L2Effect e : player.getEffectList().getAllEffects())				if(e.getSkill().getId() == 6437)					e.exit(true, false);		if(world.GlacierTimer != null)			world.GlacierTimer.cancel(false);		if(world._atackKnights != null)			world._atackKnights.cancel(false);	}	private void startAll(World world)	{		for(L2Player plr : world.getPlayers())		{			plr.p_block_move(false, null);			plr.setIsInvul(false);			plr.leaveMovieMode();		}		for(L2NpcInstance npc : world.getMonsters())		{			npc.setIsInvul(false);			npc.getAI().setIntention(CtrlIntention.AI_INTENTION_ACTIVE);			//npc.p_block_move(false, null);		}	}	private static void endStage(World world)	{		if(world == null)			return;		world.Glaciers = 0;		if(world.controler != null)			world.controler.setNpcState(8);		world.controler = null;		world.ArcheryKnights.clear();		for(L2Spawn s : world.getSpawns())			if(s.getNpcId() != Sirra)				s.despawnAll();		for(L2NpcInstance npc : world.getMonsters())			npc.deleteMe();		if(world.GlacierTimer != null)			world.GlacierTimer.cancel(false);		if(world._batleFailTask != null)			world._batleFailTask.cancel(false);		if(world._atackKnights != null)			world._atackKnights.cancel(false);		for(L2Player player : world.getPlayers())			for(L2Effect e : player.getEffectList().getAllEffects())				if(e.getSkill().getId() == 6437)					e.exit(true, false);	}	private void atackKnights(World world)	{		int attackTime = 0;		int attackCount = 0;		if(world._ishardMode)		{			switch(world.stages)			{				case 1:					attackTime = 25;					attackCount = 4;					break;				case 2:					attackTime = 25;					attackCount = 4;					break;				case 3:					attackTime = 20;					attackCount = 4;					break;				case 4:					attackTime = 20;					attackCount = 4;					break;			}		}		else		{			switch(world.stages)			{				case 1:					attackTime = 30;					attackCount = 1;					break;				case 2:					attackTime = 30;					attackCount = 2;					break;				case 3:					attackTime = 45;					attackCount = 2;					break;				case 4:					attackTime = 30;					attackCount = 2;					break;			}		}		final World wworld = world;		for(int i = 0;i < attackCount;i++)		{			if(world.ArcheryKnights.size() > 0)			{				final L2NpcInstance mob = world.ArcheryKnights.get(Rnd.get(world.ArcheryKnights.size()));				world.ArcheryKnights.remove(mob);				mob.setNpcState(2);				mob.setParalyzed(false);				ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()				{					@Override					public void runImpl()					{						if(!wworld._setStop)						{							L2NpcInstance mob2 = spawn(wworld.ArcheryKnight, mob.getSpawnedLoc().x, mob.getSpawnedLoc().y, mob.getSpawnedLoc().z, 0, wworld);							if(mob2 != null)							{								wworld.ArcheryKnights.add(mob2);								mob2.setNpcState(1);								mob2.setParalyzed(true);							}						}					}				}, 20000);			}		}		// Запуск следующей разморозки кнайта...		world._atackKnights = ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()		{			@Override			public void runImpl()			{				atackKnights(wworld);			}		}, attackTime * 1000);	}	private void spawnKnights(World world)	{		for(int i = 0; i < KnightSpawns.length; i++)		{			int spawn[] = KnightSpawns[i];			L2NpcInstance mob = spawn(world.ArcheryKnight, spawn[0], spawn[1], spawn[2], 0, world);			if(mob != null)			{				mob.setNpcState(1);				world.ArcheryKnights.add(mob);				mob.setParalyzed(true);			}		}		if(world.status != 3)		{			spawn(world.ArcheryKnight, 114713, -115109, -11202, 16456, world);			spawn(world.ArcheryKnight, 114008, -115080, -11202, 3568, world);			spawn(world.ArcheryKnight, 114422, -115508, -11202, 12400, world);			spawn(world.ArcheryKnight, 115023, -115508, -11202, 20016, world);			spawn(world.ArcheryKnight, 115459, -115079, -11202, 27936, world);			spawn(world.ArcheryKnight, 114176, -114576, -11202, 16456, world);			spawn(world.ArcheryKnight, 115264, -114576, -11202, 3568, world);			atackKnights(world);		}		else		{			spawn(world.ArcheryKnight, 114713, -115109, -11202, 16456, world);			spawn(world.ArcheryKnight, 114008, -115080, -11202, 3568, world);			spawn(world.ArcheryKnight, 114422, -115508, -11202, 12400, world);			spawn(world.ArcheryKnight, 115023, -115508, -11202, 20016, world);			spawn(world.ArcheryKnight, 115459, -115079, -11202, 27936, world);		}	}	private void spawnGlaciers(World world)	{		int spawnTime = -1;		if(world._ishardMode)		{			switch(world.stages)			{				case 1:					spawnTime = 25;					break;				case 2:					spawnTime = 20;					break;				case 3:					spawnTime = 20;					break;				case 4:					spawnTime = 20;					break;			}		}		else		{			switch(world.stages)			{				case 1:					spawnTime = 45;					break;				case 2:					spawnTime = 30;					break;				case 3:					spawnTime = 30;					break;				case 4:					spawnTime = 0;					break;			}		}		if(spawnTime > 0 && world.Glaciers < 7)		{			if(!world._setStop)			{				int spawn[] = TerritoryTable.getInstance().getRandomPoint(99911999);				final L2NpcInstance mob = spawn(Glacier, spawn[0], spawn[1], -11200, 0, world);				if(world.controler == null)				{					world.controler = spawn(Controler, 114707, -114797, -11199, 0, world);					world.controler.setIsInvul(true);					world.controler.setParalyzed(true);				}				if(world.controler != null)					world.controler.setNpcState(world.Glaciers);				mob.setNpcState(1);				world.Glaciers++;				if(world.Glaciers > 7)					world.Glaciers = 7;				ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()				{					@Override					public void runImpl()					{						mob.setNpcState(2);					}				}, 1500);				for(L2Player player : world.getPlayers())					SkillTable.getInstance().getInfo(6437, world.Glaciers).getEffects(mob, player, false, false);			}		}		final World wworld = world;		world.GlacierTimer = ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()		{			@Override			public void runImpl()			{				spawnGlaciers(wworld);			}		}, spawnTime * 1000);	}	private void moveTo(L2NpcInstance npc, Location loc)	{		if(npc != null)		{			int heading = (int)(Util.calculateAngleFrom(npc.getX(), npc.getY(), loc.x, loc.y) * 182.04444444399999);			npc.setRunning();			npc.moveToLocation(loc.x, loc.y, loc.z, heading, true);			npc.getSpawn().setLocx(loc.x);			npc.getSpawn().setLocy(loc.y);			npc.getSpawn().setLocz(loc.z);		}	}	@Override	public String onEvent(String event, QuestState st, final L2NpcInstance npc)	{		if(event == null || st == null || npc == null)			return "";		if(npc.getNpcId() == KegorTalk)		{			if(event.equalsIgnoreCase("killFreya"))			{				for(L2Player player : npc.getReflection().getPlayers())					player.showQuestMovie(20); // Последнее видео, это когда Кегор делает "сикирь бошка" Фрее...				ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()				{					@Override					public void runImpl()					{						for(L2Player player : npc.getReflection().getPlayers())							player.leaveMovieMode();					}				}, 57100);				npc.getReflection().startCollapseTimer(57800);				for(L2Player pl : npc.getReflection().getPlayers())					if(pl != null)						pl.sendPacket(new SystemMessage(SystemMessage.THIS_DUNGEON_WILL_EXPIRE_IN_S1_MINUTES).addNumber(1));				// Если человек проходит квест то ставим ему завершение данного этапа...				for(L2Player player : npc.getReflection().getPlayers())				{					QuestState hostQuest = player.getQuestState("_10286_ReunionWithSirra");					if(hostQuest != null && hostQuest.getState() != COMPLETED && hostQuest.getInt("progress") == 2 && hostQuest.getInt("cond") == 6 && hostQuest.getInt("Ex") == 2)					{						hostQuest.set("cond", "7");						hostQuest.set("progress", "3");						hostQuest.playSound("ItemSound.quest_middle");					}				}				delWorld(npc.getReflectionId());			}		}		else if(npc.getNpcId() == Sirra)		{			if(event.equalsIgnoreCase("toEnterCastle"))				st.getPlayer().teleToLocation(114694, -113700, -11200);		}		else if(npc.getNpcId() == JiniaStart)		{			if(event.equalsIgnoreCase("toEnter"))			{				if(ConfigValue.DEBUG_FREYA)				{					enterInstance(npc, st.getPlayer(), false, false);					return "";				}				else				{					if(players.get(st.getPlayer()) != null)					{						st.getPlayer().setReflection(players.get(st.getPlayer()));						st.getPlayer().teleToLocation(114025, -112300, -11200);						return "";					}					else					{						if(st.getPlayer().getParty() != null && st.getPlayer().getParty().isInReflection())						{							enterInstance(npc, st.getPlayer(), false, true);							return "";						}						else if(st.getPlayer().getParty() != null && (st.getPlayer().getParty().getCommandChannel() != null && st.getPlayer().getParty().getCommandChannel().getChannelLeader().getObjectId() == st.getPlayer().getObjectId() || !ConfigValue.FreyaNeedCommandChanel && st.getPlayer().getParty().isLeader(st.getPlayer())))						{							enterInstance(npc, st.getPlayer(), false, false);							return "";						}						else						{							showHtmlFile(st.getPlayer(), "data/html/default/jinia_npc2007.htm");							return "";						}					}				}			}			else if(event.equalsIgnoreCase("toEnterHard"))			{				if(ConfigValue.DEBUG_FREYA)				{					enterInstance(npc, st.getPlayer(), true, false);					return "";				}				else				{					if(players.get(st.getPlayer()) != null)					{						st.getPlayer().setReflection(players.get(st.getPlayer()));						st.getPlayer().teleToLocation(114025, -112300, -11200);						return "";					}					else					{						if(st.getPlayer().getParty() != null && st.getPlayer().getParty().isInReflection())						{							enterInstance(npc, st.getPlayer(), true, true);							return "";						}						else if(st.getPlayer().getParty() != null && (st.getPlayer().getParty().getCommandChannel() != null && st.getPlayer().getParty().getCommandChannel().getChannelLeader().getObjectId() == st.getPlayer().getObjectId() || !ConfigValue.FreyaNeedCommandChanel && st.getPlayer().getParty().isLeader(st.getPlayer())))						{							enterInstance(npc, st.getPlayer(), true, false);							return "";						}						else						{							showHtmlFile(st.getPlayer(), "data/html/default/jinia_npc2007.htm");							return "";						}					}				}			}		}		else if(npc != null && npc.getReflectionId() > 0)		{			World world = getWorld(npc.getReflectionId());			if(event.equalsIgnoreCase("respawnKnight"))			{				L2NpcInstance knight = addSpawnToInstance(world.ArcheryKnight, new Location(npc.getSpawn().getLocx(), npc.getSpawn().getLocy(), npc.getSpawn().getLocz(), npc.getSpawn().getHeading()), 0, world.getId());				if(knight != null)				{					knight.setNpcState(1);					knight.p_block_move(true, null);				}			}		}		return null;	}	@Override	public String onKill(L2NpcInstance npc, QuestState st)	{		if(npc.getReflectionId() > 0)		{			final World world = getWorld(npc.getReflectionId());			if(npc.getNpcId() == world.FreyaOnThrone && world.status == 1)			{				world.finish = true;				stopAll(world);				endStage(world);				world.status = 2;				startWave(2, world);			}			else if(npc.getNpcId() == world.ArcheryKnight)			{				if(world.status == 2)				{					world.archery++;					if(world.archery >= 10)					{						stopAll(world);						endStage(world);						world.status = 3;						for(L2Player players : world.getPlayers())							players.showQuestMovie(23); // Третье видео, это когда Клакиес выпрыгивает из пола...						ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()						{							@Override							public void runImpl()							{								world._setStop = false;								startAll(world);								spawn(world.Glakias, 114722, -114797, -11200, 16384, world);								spawnKnights(world);								spawnGlaciers(world);								if(world._ishardMode)								{									ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()									{										@Override										public void runImpl()										{											for(L2Player members : world.getPlayers())												members.sendPacket(new ExSendUIEvent(members, false, false, world.tick, 0, "Время окончания боя"));										}									}, 1500);								}							}						}, 7000);					}				}			}			// Это когда мы убиваем Клакиеса...			else if(npc.getNpcId() == world.Glakias && world.status == 3)			{				ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()				{					@Override					public void runImpl()					{						world.finish = true;						world.status = 4;						endStage(world);						world._setStop = true;						for(L2Player members : world.getPlayers())							members.sendPacket(new ExSendUIEvent(members, false, false, 60, 0, "Время до следующего боя"));						//ThreadPoolManager.getInstance().schedule(new Timer(60, world), 100);						ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()						{							@Override							public void runImpl()							{								startWave(3, world);							}						}, 60100);					}				}, 2500);			}			else if(npc.getNpcId() == world.FreyaStand && world.status == 6)			{				//synchronized (lastDamagers)				//{					//Log.add(PrintfFormat.LOG_BOSS_KILLED, new Object[] { npc.getTypeName(), npc.getName(), npc.getNpcId(), killer, npc.getX(), npc.getY(), npc.getZ(), "0" }, "bosses");				//	for(String damagerName : lastDamagers.keySet())				//		Log.add("\tDamager [" + damagerName + "] = " + lastDamagers.get(damagerName), "bosses");				//	lastDamagers.clear();				//}												world.finish = true;				world._setStop = true;				endStage(world);				for(L2Player players : world.getPlayers())					players.showQuestMovie(19); // Пятое видео, это когда мы убиваем Фрею окончательно...				ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()				{					@Override					public void runImpl()					{						for(L2Player player : world.getPlayers())						{							player.sendPacket(new ChangeZoneInfo(1));							for(int _eventTrigger : _eventTriggers)								player.sendPacket(new EventTrigger(_eventTrigger, false));							for(int _eventTrigger : EMITTERS2)								player.sendPacket(new EventTrigger(_eventTrigger, true));						}					}				}, 500);				ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()				{					@Override					public void runImpl()					{						world._setStop = false;						world.Npc_Freya = spawn(world.FreyaStand, 114767, -114795, -11200, 0, world);						world.Npc_Freya.setCurrentHp((double)1, true);						world.Npc_Freya.setParalyzed(true);						world.Npc_Freya.setIsInvul(true);						world.Npc_Freya.setRHandId(15280);						world.Npc_Freya.setNpcState(0);						spawn(KegorTalk, 114672, -114793, -11200, 0, world);						world._setStop = true;					}				}, 1000);				// Ставим время отката рефлекта для всех кто заходил, а не для тех кто в нем сразу после убийства фреи...				Reflection ref;				for(L2Player player : players.keySet())				{					if(players.get(player) == null)						continue;					ref = players.get(player);					if(ref.getId() != npc.getReflectionId())						continue;					player.setVarInst(ref.getName(), String.valueOf(System.currentTimeMillis()));					if(QuestManager.getQuest(99915) != null)					{						String qn = QuestManager.getQuest(99915).getName();						if(qn != null)						{							QuestState qs = player.getQuestState(qn);							if(qs != null)								qs.exitCurrentQuest(true);						}					}					for(int _eventTrigger : EMITTERS2)						player.sendPacket(new EventTrigger(_eventTrigger, false));					player.sendPacket(new ChangeZoneInfo(0));					players.remove(player);				}				ref = null;			}			else if(npc.getNpcId() == Glacier)			{				npc.setNpcState(3);				if(world.Glaciers != 0)					world.Glaciers--;				if(world.controler != null)					world.controler.setNpcState(world.Glaciers);				if(world.Glaciers > 0)					for(L2Player tmpPlayer : world.getPlayers())						SkillTable.getInstance().getInfo(6437, world.Glaciers).getEffects(npc, tmpPlayer, false, false);				npc.setNpcState(3);				npc.deleteMe();				if(!world._setStop)					spawn(ArchersBreath, npc.getX(), npc.getY(), npc.getZ(), 0, world);				if(world.Glaciers == 0)				{					if(world.controler != null)						world.controler.setNpcState(8);					for(L2Player player : world.getPlayers())						for(L2Effect e : player.getEffectList().getAllEffects())							if(e.getSkill().getId() == 6437)								e.exit(true, false);					for(L2Player tmpPlayer : world.getPlayers())						SkillTable.getInstance().getInfo(6301, 1).getEffects(npc, tmpPlayer, false, false);				}			}		}		return null;	}	@Override	public String onAttack(final L2NpcInstance npc, QuestState st)	{		if(npc.getReflectionId() > 0)		{			final World world = getWorld(npc.getReflectionId());			if(npc != null && world != null && npc.getNpcId() == world.FreyaStand && npc.getCurrentHp() < npc.getMaxHp() * 0.30 && world.status == 5)			{				world.stages = 4;				world.finish = true;				stopAll(world);				npc.setParalyzed(true);				world.status = 6;				for(L2Player players : world.getPlayers())					players.showQuestMovie(18); // Это когда выбегает Кегор с Зиниеей...				ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()				{					@Override					public void runImpl()					{						world.finish = false;						npc.setParalyzed(false);						startAll(world);						world._setStop = false;						world.Npc_Kegor = spawn(Kegor, 114690, -114797, -11200, 16260, world);						world.Npc_Kegor.setRunning();						world.Npc_Kegor.setIsInvul(true);						world.Npc_Jinia = spawn(Jinia, 114727, -114700, -11200, 16260, world);						world.Npc_Jinia.setRunning();						world.Npc_Jinia.setIsInvul(true);						screenMessage(world,1801089,ScreenMessageAlign.TOP_CENTER, true);					}				}, 28000);			}			else if(npc != null && world != null && npc.getNpcId() == world.ArcheryKnight && npc.isParalyzed())			{				npc.setNpcState(2);				npc.p_block_move(false, null);				npc.setParalyzed(false);				startQuestTimer("respawnKnight", 20000, npc, null);			}		}		return super.onAttack(npc, st);	}	@Override	public String onDeath(L2Character killer, L2Playable victim, QuestState qs)	{		if(killer != null && killer.getReflectionId() > 0 && victim != null && victim.getReflectionId() > 0)		{					}		return super.onDeath(killer, victim, qs);	}	public void batleFailTask(World world)	{		if(world._ishardMode && world.status != 1 && world.status != 5)		{			for(L2Player members : world.getPlayers())				members.sendPacket(new ExSendUIEvent(members, false, false, 360, 0, "Время окончания боя"));			final World wworld = world;			world._batleFailTask = ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()			{				@Override				public void runImpl()				{					batleFail(wworld);				}			}, 6 * 60 * 1000);		}	}	public void batleFail(World world) // на первый этап дается 5 минут	{		endStage(world);		world._setStop = true;		for(L2Player player : world.getPlayers())			if(player.getReflection() == world)				player.showQuestMovie(22); // Если мы не вложились во время 		final World wworld = world;		ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()		{			@Override			public void runImpl()			{				for(L2Player player : wworld.getPlayers())					if(player.getReflection() == wworld)						player.leaveMovieMode();			}		}, 21500);		world.startCollapseTimer(22500);		delWorld(world.getId());	}	public static void batleFailStatic(L2NpcInstance npc) // на первый этап дается 5 минут	{		final World world = getWorld(npc.getReflectionId());		if(world == null)			return;		endStage(world);		world._setStop = true;		for(L2Player player : world.getPlayers())			if(player.getReflection() == world)				player.showQuestMovie(22); // Если мы не вложились во время 		ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()		{			@Override			public void runImpl()			{				for(L2Player player : world.getPlayers())					if(player.getReflection() == world)						player.leaveMovieMode();			}		}, 21500);		world.startCollapseTimer(22500);		delWorld(world.getId());	}	private class Timer extends l2open.common.RunnableImpl	{		private int time = 0;		private World world = null;		@Override		public void runImpl()		{			if(time < 1)				return;			world.tick = time;			ThreadPoolManager.getInstance().schedule(new Timer(time - 1, world), 1000);		}		public Timer(int _time, World _world)		{			time = _time;			world = _world;		}	}	public class ZoneListener extends L2ZoneEnterLeaveListener	{		@Override		public void objectEntered(L2Zone zone, L2Object object)		{			if(object != null && object.isPlayer() && !object.inObserverMode())			{				L2Player player = (L2Player)object;				final World world = getWorld(player.getReflectionId());				if(world != null)				{					if(zone.getId() == 702123 && world.status < 1)					{						world.status = 1;						ThreadPoolManager.getInstance().schedule(new l2open.common.RunnableImpl()						{							@Override							public void runImpl()							{								startWave(1, world); // Запуск первого этапа, выползает Фрея на диванчике с пивком, её нужно отиметь...							}						}						, 20000);					}				}			}		}		@Override		public void objectLeaved(L2Zone zone, L2Object object)		{			/*L2Playable player = (L2Playable)object;			final World world = getWorld(player.getReflectionId());			if(world != null)				if(zone.getId() == 702123)					System.out.println("FreyaManager > objectLeaved: " + player.getName() + "  world.status: " + world.status);*/		}	}	public static boolean isBatle(L2Player player)	{		World world = getWorld(player.getReflectionId());		if(world != null)			return world._isBatle;		return false;	}	public void playSound(L2NpcInstance npc, String sound)	{		npc.broadcastPacket(new PlaySound(sound));		//for(L2Player player : ref.getPlayers())		//	player.sendPacket(new PlaySound(1, sound, 1));	}	public void screenMessage(Reflection ref, int id, ScreenMessageAlign align, boolean bool)	{		for(L2Player members : ref.getPlayers())			members.sendPacket(new ExShowScreenMessage(id, 6000, align, true, 1, -1, bool));	}	private L2Skill getSkill(int id, int level)	{		return SkillTable.getInstance().getInfo(id, level);	}	public void onLoad()	{		_zone = ZoneManager.getInstance().getZoneById(ZoneType.epic, 702123, false);		_zone.getListenerEngine().addMethodInvokedListener(_zoneListener);	}	public void onReload()	{		_zone.getListenerEngine().removeMethodInvokedListener(_zoneListener);	}	public void onShutdown()	{}}